package com.yunmo.iot.consumer;import com.yunmo.domain.common.Events;import com.yunmo.iot.pipe.core.DeviceConnectionEvent;import com.yunmo.iot.pipe.core.DeviceConnectionEventMarshaller;import lombok.extern.slf4j.Slf4j;import org.apache.pulsar.client.api.*;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.context.event.ContextRefreshedEvent;import org.springframework.context.event.EventListener;import org.springframework.stereotype.Component;import java.io.ByteArrayInputStream;import java.util.Objects;import java.util.stream.IntStream;@Component@Slf4jpublic class DeviceConnectionEventPulsarConsumer {    @Autowired    private PulsarClient client;    ConsumerBuilder<byte[]> consumerBuilder;    private DeviceConnectionEventMarshaller marshaller = new DeviceConnectionEventMarshaller();    @EventListener    public void run(ContextRefreshedEvent event) {        this.consumerBuilder = this.client.newConsumer()                .topic("iot/pipe/connection")                .subscriptionName("iot-core-connection")                .deadLetterPolicy(DeadLetterPolicy.builder()                .maxRedeliverCount(3)                .build())                .subscriptionType(SubscriptionType.Shared);        IntStream.range(0,4).forEach(i->{            try {                this.consumerBuilder.consumerName(String.format("iov-core-connection-consumer-%d", i))                        .messageListener(this::process)                        .subscribe();            } catch (PulsarClientException e) {                log.error("在线状态订阅失败:{}", e.getMessage());            }        });    }    private void process(Consumer<byte[]> consumer, Message<byte[]> msg) {        try {            DeviceConnectionEvent oneOfEvent = marshaller.parse(new ByteArrayInputStream(msg.getData()));            if(!Objects.isNull(oneOfEvent.getOnlineEvent())) {                Events.post(oneOfEvent.getOnlineEvent());            } else {                Events.post(oneOfEvent.getOfflineEvent());            }            consumer.acknowledge(msg);        } catch (Exception e) {            log.warn("连接消息处理异常：",e);            consumer.negativeAcknowledge(msg);        }    }}